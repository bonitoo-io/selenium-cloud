- name: Add new instance to host group
  add_host:
    hostname: "{{ item.public_dns_name }}"
    groupname: "{{ group_name }}"
    ansible_python_interpreter: "{{ interpreter_python | default(omit) }}"
    ansible_user: "{{ remote_user | default(omit) }}"
  with_items: "{{ ec2.instances }}"

- ec2_instance_facts:
    filters:
      instance-id: "{{ item.id }}"
  register: ec2_facts
  with_items: "{{ ec2.instances }}"

- name: Set ec2 facts
  set_fact:
    ec2_all_facts: "{{ item.1 }}"
  delegate_to: "{{ item.1.public_dns_name }}"
  delegate_facts: True
  with_subelements:
    - "{{ ec2_facts.results }}"
    - instances

- name: Set ec2 price facts
  set_fact:
    ec2_maximum_price: "{{ maximum_price }}"
    ec2_current_price: "{{ current_spot_price.stdout }}"
  delegate_to: "{{ item.public_dns_name }}"
  delegate_facts: True
  with_items: "{{ ec2.instances }}"
  when: request_spot_instance | bool

- lineinfile:
    dest: "{{ workspace }}/ec2_instances.txt"
    regexp: "{{ hostvars[item].ec2_all_facts.instance_id }}"
    line: "{{ hostvars[item].ec2_all_facts.instance_id }},{{ hostvars[item].ec2_all_facts.spot_instance_request_id | default('') }},{{ hostvars[item].ec2_all_facts.instance_type }},{{ hostvars[item].ec2_all_facts.private_dns_name }},{{ hostvars[item].ec2_all_facts.public_dns_name }},{{ hostvars[item].ec2_all_facts.tags.Name }},{{ hostvars[item].ec2_all_facts.tags.Type }},{{ hostvars[item].ec2_current_price | default('') }},{{ hostvars[item].ec2_maximum_price | default('') }}"
    state: present
    create: true
  with_items: "{{ groups[group_name] }}"

- name: Wait for SSH to come up
  wait_for:
    host: "{{ item.public_dns_name }}"
    port: 22
    delay: 60
    timeout: 600
    state: started
  with_items: "{{ ec2.instances }}"
  register: _ec2_waits
  async: 7200
  poll: 0

- name: Wait for SSH to complete
  async_status: "jid={{ item.ansible_job_id }}"
  register: ec2_jobs
  until: ec2_jobs.finished
  retries: 300
  with_items: "{{ _ec2_waits.results }}"